import matplotlib.pyplot as plt
import numpy as np
from matplotlib import animation
import random
import pandas as pd
from matplotlib.animation import FuncAnimation
from matplotlib.animation import PillowWriter
import config

generated_list_of_27=[[(542.6666666666666, 208.0)], [(557.6666666666666, 333.3333333333333), (600.0, 249.33333333333331)], [(687.0, 289.6666666666667), (717.3333333333334, 354.0), (589, 390)], [(663, 278), (589, 390), (459.66666666666663, 286.6666666666667), (622.3333333333334, 230.0)], [(459.66666666666663, 286.6666666666667), (622.3333333333334, 230.0), (395, 235), (427.3333333333333, 262.3333333333333), (556.3333333333334, 187.33333333333331)], [(524.3333333333334, 338.3333333333333), (459.66666666666663, 286.6666666666667), (663, 278), (395, 235), (717.3333333333334, 354.0), (542.6666666666666, 208.0)], [(600.0, 249.33333333333331), (581.0, 150.0), (540, 86), (589, 390), (395, 235), (427.3333333333333, 262.3333333333333), (622.3333333333334, 230.0)], [(581.0, 150.0), (623.3333333333334, 349.6666666666667), (589, 390), (602, 206), (745.6666666666666, 342.0), (459.66666666666663, 286.6666666666667), (513, 209), (540, 86)], [(774, 330), (540, 86), (689, 366), (663, 278), (572.6666666666666, 288.66666666666663), (572.3333333333334, 207.0), (622.0, 214.0), (556.3333333333334, 187.33333333333331), (542.6666666666666, 208.0)], [(542.6666666666666, 208.0), (602, 206), (524.3333333333334, 338.3333333333333), (556.3333333333334, 187.33333333333331), (427.3333333333333, 262.3333333333333), (622.0, 214.0), (557.6666666666666, 333.3333333333333), (687.0, 289.6666666666667), (623.3333333333334, 349.6666666666667), (589, 390)], [(581.0, 150.0), (556.3333333333334, 187.33333333333331), (492, 317), (572.3333333333334, 207.0), (745.6666666666666, 342.0), (622.0, 214.0), (540, 86), (642.6666666666666, 254.0), (459.66666666666663, 286.6666666666667), (622.3333333333334, 230.0), (600.0, 249.33333333333331)], [(717.3333333333334, 354.0), (395, 235), (600.0, 249.33333333333331), (581.0, 150.0), (602, 206), (642.6666666666666, 254.0), (774, 330), (572.3333333333334, 207.0), (557.6666666666666, 333.3333333333333), (542.6666666666666, 208.0), (459.6666666666667, 289.6666666666667), (556.3333333333334, 187.33333333333331)], [(427.3333333333333, 262.3333333333333), (663, 278), (745.6666666666666, 342.0), (589, 390), (492, 317), (622.3333333333334, 230.0), (395, 235), (581.0, 150.0), (623.3333333333334, 349.6666666666667), (717.3333333333334, 354.0), (540, 86), (459.66666666666663, 286.6666666666667), (689, 366)], [(689, 366), (663, 278), (540, 86), (542.6666666666666, 208.0), (524.3333333333334, 338.3333333333333), (745.6666666666666, 342.0), (687.0, 289.6666666666667), 
(427.3333333333333, 262.3333333333333), (572.3333333333334, 207.0), (513, 209), (581.0, 150.0), (589, 390), (623.3333333333334, 349.6666666666667), (622.0, 214.0)], [(745.6666666666666, 342.0), (542.6666666666666, 208.0), (622.3333333333334, 230.0), (623.3333333333334, 349.6666666666667), (622.0, 214.0), (459.6666666666667, 289.6666666666667), (540, 86), (774, 330), (600.0, 249.33333333333331), (589, 390), (602, 206), (395, 235), (581.0, 150.0), (492, 317), (642.6666666666666, 254.0)], [(622.3333333333334, 230.0), 
(717.3333333333334, 354.0), (774, 330), (427.3333333333333, 262.3333333333333), (572.3333333333334, 207.0), (513, 209), (687.0, 289.6666666666667), (689, 366), (572.6666666666666, 288.66666666666663), (600.0, 249.33333333333331), (589, 390), (524.3333333333334, 338.3333333333333), (622.0, 214.0), (492, 317), (540, 86), (557.6666666666666, 333.3333333333333)], [(602, 206), (622.3333333333334, 230.0), (427.3333333333333, 262.3333333333333), (572.6666666666666, 288.66666666666663), (513, 209), (622.0, 214.0), (581.0, 
150.0), (540, 86), (395, 235), (589, 390), (774, 330), (557.6666666666666, 333.3333333333333), (459.6666666666667, 289.6666666666667), (524.3333333333334, 338.3333333333333), (542.6666666666666, 208.0), (663, 278), (687.0, 289.6666666666667)], [(540, 86), (622.3333333333334, 230.0), (513, 209), (572.6666666666666, 288.66666666666663), (459.6666666666667, 289.6666666666667), (687.0, 289.6666666666667), (542.6666666666666, 208.0), (492, 317), (622.0, 214.0), (524.3333333333334, 338.3333333333333), (572.3333333333334, 207.0), (602, 206), (459.66666666666663, 286.6666666666667), (689, 366), (556.3333333333334, 187.33333333333331), (663, 278), (589, 390), (717.3333333333334, 354.0)], [(745.6666666666666, 342.0), (459.6666666666667, 289.6666666666667), (663, 278), (540, 86), 
(689, 366), (557.6666666666666, 333.3333333333333), (524.3333333333334, 338.3333333333333), (572.6666666666666, 288.66666666666663), (492, 317), (623.3333333333334, 349.6666666666667), (622.0, 214.0), (581.0, 150.0), (513, 209), (542.6666666666666, 208.0), (600.0, 249.33333333333331), (687.0, 289.6666666666667), (427.3333333333333, 262.3333333333333), (395, 235), (774, 330)], [(663, 278), (622.3333333333334, 230.0), (642.6666666666666, 254.0), (557.6666666666666, 333.3333333333333), (513, 209), (542.6666666666666, 
208.0), (622.0, 214.0), (581.0, 150.0), (717.3333333333334, 354.0), (524.3333333333334, 338.3333333333333), (774, 330), (556.3333333333334, 187.33333333333331), (687.0, 289.6666666666667), (572.3333333333334, 207.0), (492, 317), (689, 366), (459.66666666666663, 286.6666666666667), (745.6666666666666, 342.0), (395, 235), (459.6666666666667, 289.6666666666667)], [(540, 86), (492, 317), (642.6666666666666, 254.0), (542.6666666666666, 208.0), (513, 209), (689, 366), (572.3333333333334, 207.0), (556.3333333333334, 187.33333333333331), (581.0, 150.0), (717.3333333333334, 354.0), (687.0, 289.6666666666667), (602, 206), (745.6666666666666, 342.0), (459.6666666666667, 289.6666666666667), (622.0, 214.0), (622.3333333333334, 230.0), (427.3333333333333, 262.3333333333333), (774, 330), (600.0, 249.33333333333331), (663, 278), (589, 390)], [(689, 366), (745.6666666666666, 342.0), (459.66666666666663, 286.6666666666667), (524.3333333333334, 338.3333333333333), (642.6666666666666, 254.0), (774, 330), (602, 206), (623.3333333333334, 349.6666666666667), (600.0, 249.33333333333331), (513, 209), (663, 278), (557.6666666666666, 333.3333333333333), (572.6666666666666, 288.66666666666663), (427.3333333333333, 262.3333333333333), (572.3333333333334, 207.0), (556.3333333333334, 187.33333333333331), (459.6666666666667, 289.6666666666667), (622.0, 214.0), (542.6666666666666, 208.0), (622.3333333333334, 230.0), (540, 86), (589, 390)], [(524.3333333333334, 338.3333333333333), (540, 86), (623.3333333333334, 349.6666666666667), (572.6666666666666, 288.66666666666663), (642.6666666666666, 254.0), (600.0, 249.33333333333331), (717.3333333333334, 354.0), (542.6666666666666, 208.0), (622.3333333333334, 230.0), (459.6666666666667, 289.6666666666667), (622.0, 214.0), (745.6666666666666, 342.0), (513, 209), (459.66666666666663, 286.6666666666667), (581.0, 150.0), (492, 317), (395, 235), (427.3333333333333, 262.3333333333333), (556.3333333333334, 187.33333333333331), (572.3333333333334, 207.0), (689, 366), (687.0, 289.6666666666667), (589, 390)], [(602, 206), (556.3333333333334, 187.33333333333331), (395, 235), (622.3333333333334, 230.0), (557.6666666666666, 333.3333333333333), (492, 317), (642.6666666666666, 
254.0), (589, 390), (717.3333333333334, 354.0), (542.6666666666666, 208.0), (572.3333333333334, 207.0), (459.66666666666663, 286.6666666666667), (623.3333333333334, 349.6666666666667), (622.0, 214.0), (687.0, 289.6666666666667), (774, 330), (689, 366), (745.6666666666666, 342.0), (427.3333333333333, 262.3333333333333), (524.3333333333334, 338.3333333333333), (459.6666666666667, 289.6666666666667), (600.0, 249.33333333333331), (581.0, 150.0), (540, 86)], [(513, 209), (572.6666666666666, 288.66666666666663), (459.66666666666663, 286.6666666666667), (663, 278), (427.3333333333333, 262.3333333333333), (689, 366), (622.3333333333334, 230.0), (581.0, 150.0), (459.6666666666667, 289.6666666666667), (687.0, 289.6666666666667), (542.6666666666666, 208.0), (395, 235), (600.0, 249.33333333333331), (572.3333333333334, 207.0), (557.6666666666666, 333.3333333333333), (492, 317), (589, 390), (622.0, 214.0), (556.3333333333334, 187.33333333333331), (774, 330), (642.6666666666666, 254.0), (540, 86), (623.3333333333334, 349.6666666666667), (717.3333333333334, 354.0), (745.6666666666666, 342.0)], [(459.6666666666667, 289.6666666666667), (623.3333333333334, 349.6666666666667), (427.3333333333333, 262.3333333333333), (589, 390), (717.3333333333334, 354.0), (556.3333333333334, 187.33333333333331), (689, 366), (542.6666666666666, 208.0), (492, 317), (745.6666666666666, 342.0), (581.0, 150.0), (572.6666666666666, 288.66666666666663), (600.0, 249.33333333333331), (524.3333333333334, 338.3333333333333), (602, 206), (540, 86), (395, 235), (663, 278), (642.6666666666666, 254.0), (572.3333333333334, 207.0), (557.6666666666666, 333.3333333333333), (459.66666666666663, 286.6666666666667), (774, 330), (513, 209), (622.3333333333334, 230.0), (687.0, 289.6666666666667)], [(663, 278), (556.3333333333334, 187.33333333333331), (540, 86), (513, 209), (492, 317), (581.0, 150.0), (572.6666666666666, 288.66666666666663), (689, 366), (589, 390), (524.3333333333334, 338.3333333333333), (557.6666666666666, 333.3333333333333), (622.3333333333334, 230.0), (572.3333333333334, 207.0), (459.6666666666667, 289.6666666666667), (395, 235), (600.0, 249.33333333333331), (642.6666666666666, 254.0), (717.3333333333334, 354.0), (623.3333333333334, 349.6666666666667), (745.6666666666666, 342.0), (427.3333333333333, 262.3333333333333), (687.0, 289.6666666666667), (774, 330), (459.66666666666663, 286.6666666666667), (542.6666666666666, 208.0), (602, 206), (622.0, 214.0)]]

list_of_27=[(774, 330),(513, 209),(602, 206),(663, 278),(540, 86),(589, 390),(395, 235),(492, 317),(689, 366)]


def DrawPlainMap(df, routes=None):  # df:DataFrame,
    plt.figure(figsize=(5, 5))

    # draw problem state
    for i, row in df.iterrows():
        # draw first point
        if i == 0:
            plt.scatter(row["x"], row["y"], c="r")
            plt.text(row["x"] + 1, row["y"] + 1, "depot")
        # draw other points
        else:
            plt.scatter(row["x"], row["y"], c="black")
            plt.text(row["x"] + 1, row["y"] + 1, f"{i}")

    plt.xlim([df.x.min(), df.x.max()])
    plt.ylim([df.y.min(), df.y.max()])
    plt.title("points: id")
    # plt.show()
    if routes:
        arrowprops = dict(arrowstyle="->", connectionstyle="arc3", edgecolor="#FFF")
        for i, j in routes:
            plt.annotate(
                "",
                xy=[df.iloc[j]["x"], df.iloc[j]["y"]],
                xytext=[df.iloc[i]["x"], df.iloc[i]["y"]],
                arrowprops=arrowprops,
            )
    plt.show()


def DrawRealMap(df, map=None, routes=None):  # df:DataFrame,
    if map is None:
        map = plt.imread(config.mypath+"pure_map_dark.png")
    # get edge coords
    BBox = (df.x.min(), df.x.max(), df.y.min(), df.y.max())
    fig, ax = plt.subplots(figsize=(8, 7))
    ax.set_title("Plotting Spatial Data")
    

    ax.set_xlim(BBox[0], BBox[1])
    ax.set_ylim(BBox[2], BBox[3])
    ax.imshow(map, zorder=0, extent=BBox, aspect="equal")
    if routes:
        arrowprops = dict(
            arrowstyle="->", connectionstyle="arc3", edgecolor="#FFF", linewidth=2
        )
        for i, j in routes:
            plt.annotate(
                "",
                xy=[df.iloc[j]["x"], df.iloc[j]["y"]],
                xytext=[df.iloc[i]["x"], df.iloc[i]["y"]],
                arrowprops=arrowprops,
            )

    ax.scatter(df.x, df.y, zorder=1, alpha=1, c="#FFF", s=30)
    
    ax = plt.gca()
    ax.invert_yaxis()
    plt.show()
    return plt

def shuffle_list(mylist):
    random.shuffle(mylist)
    return mylist


def augment_list(mylist, n_part_divide):
    tmpList_len = len(mylist)
    newList = []
    for i in range(tmpList_len):
        newList.append(mylist[i])
        for j in range(n_part_divide - 1):
            newList.append(
                tuple(
                    map(
                        lambda a, b: a + (b - a) / n_part_divide * (j + 1),
                        mylist[i % tmpList_len],
                        mylist[(i + 1) % tmpList_len],
                    )
                )
            )

    # print(mylist)
    return list(newList)

'''
def show_animation(df, map=None, routes=None):
    
    if map is None:
        map = plt.imread(config.mypath+"pure_map_dark.png")
    # get edge coords
    BBox = (df.x.min(), df.x.max(), df.y.min(), df.y.max())
    fig, ax = plt.subplots(figsize=(8, 7))
    ax.set_xlim(BBox[0], BBox[1])
    ax.set_ylim(BBox[2], BBox[3])
    ax.scatter(df.x, df.y, zorder=1, alpha=1, c="#FFF", s=30)
    # fig = plt.figure()
    # ax = plt.axes(xlim=(0, 2), ylim=(-2, 2))

    line, = ax.plot([], [])


    anim = animation.FuncAnimation(fig, DrawRealMap(df, map, routes),
                                frames=100, interval=20, blit=True)

    plt.show()
'''
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation

def DrawRealMap2(df, map=None, routes=None):
    if map is None:
        map = plt.imread(config.mypath+"pure_map_dark.png")
        
    # Get edge coords
    BBox = (df.x.min(), df.x.max(), df.y.min(), df.y.max())
    fig, ax = plt.subplots(figsize=(8, 7))
    ax.set_title("Plotting Spatial Data")
    ax.set_xlim(BBox[0], BBox[1])
    ax.set_ylim(BBox[2], BBox[3])
    ax.imshow(map, zorder=0, extent=BBox, aspect="equal")
    
    # Initialize the lines collection
    lines = ax.plot([], [], lw=2, color="blue")[0]
    
    if routes:
        arrowprops = dict(arrowstyle="->", connectionstyle="arc3", edgecolor="#FFF", linewidth=2)
        
    def animate(frame):
        if frame < len(routes):
            i, j = routes[frame]
            line_data = [[df.iloc[i]["x"], df.iloc[j]["x"]], [df.iloc[i]["y"], df.iloc[j]["y"]]]
            lines.set_data(line_data)
        return lines,
    
    # Create the animation
    num_frames = len(routes) if routes else 1
    animation = FuncAnimation(fig, animate, frames=num_frames, interval=1000, blit=True)
    
    ax.scatter(df.x, df.y, zorder=1, alpha=1, c="#FFF", s=30)
    ax = plt.gca()
    ax.invert_yaxis()
    plt.show()
    return plt
def DrawRealMap3(df, map=None, routes=None):
    if map is None:
        map = plt.imread(config.mypath+"pure_map_dark.png")

    # Get edge coords
    BBox = (df.x.min(), df.x.max(), df.y.min(), df.y.max())
    fig, ax = plt.subplots(figsize=(8, 7))
    # ax.set_title("Plotting Spatial Data")
    # ax.set_xlim(BBox[0], BBox[1])
    # ax.set_ylim(BBox[2], BBox[3])
    
    ax.set_xlim(BBox[0]-(BBox[1]-BBox[0])/10, BBox[1]+(BBox[1]-BBox[0])/10)
    ax.set_ylim(BBox[2]-(BBox[3]-BBox[2])/10, BBox[3]+(BBox[3]-BBox[2])/10)
    ax.imshow(map, zorder=0, extent=BBox, aspect="equal")

    # Draw existing points
    ax.scatter(df.x, df.y, zorder=1, alpha=1, c=df.color, s=30)

    # Draw existing routes
    if routes:
        arrowprops = dict(arrowstyle="->", connectionstyle="arc3", edgecolor="#FFF", linewidth=2)
        for i, j in routes:
            ax.annotate(
                "",
                xy=[df.iloc[j]["x"], df.iloc[j]["y"]],
                xytext=[df.iloc[i]["x"], df.iloc[i]["y"]],
                arrowprops=arrowprops,
            )

    # Initialize the lines collection
    lines = ax.plot([], [], lw=2, color="blue")[0]

    def animate(frame):
        if frame < len(routes):
            i, j = routes[frame]
            line_data = [[df.iloc[i]["x"], df.iloc[j]["x"]], [df.iloc[i]["y"], df.iloc[j]["y"]]]
            lines.set_data(line_data)
        return lines,

    # Create the animation
    num_frames = len(routes) if routes else 1
    _animation = FuncAnimation(fig, animate, frames=num_frames, interval=1000, blit=True)
    

    # ax = plt.gca()
    # ax.invert_yaxis()
    plt.show()
    return plt
'''
i=10
mylist=generated_list_of_27[i-1]
xlist = []
ylist = []

xlist = [xx[0] for xx in mylist]
ylist = [yy[1] for yy in mylist]

d = {"x": xlist, "y": ylist}
df = pd.DataFrame(data=d)
print(df)
routes=[(0, 21), (1, 3), (2, 16), (3, 20), (4, 6), (5, 15), (6, 1), (7, 5), (8, 0), (9, 4), (10, 19), (11, 13), (12, 18), (13, 8), (14, 24), (15, 10), (16, 23), (17, 25), (18, 17), (19, 14), (20, 11), (21, 2), (22, 9), (23, 7), (24, 12), (25, 22)]
    
DrawPlainMap1(df, None, routes)
'''